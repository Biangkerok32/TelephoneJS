
(try-catch 
            (let 
                ((
                    attempt 
                        (delay 
                            (set-form-name "Screen1")
                        )
                )) 
                (force attempt)
            ) 
            (exception java.lang.Throwable 'notfound)
        )
        
(do-after-form-creation
	(set-and-coerce-property! 'Screen1 'AppName "yail" 'text)
	(set-and-coerce-property! 'Screen1 'Title "Great Title!" 'text)
	(set-and-coerce-property! 'Screen1 'TitleVisible #f 'boolean)
	(set-and-coerce-property! 'Screen1 'ShowStatusBar #f 'boolean)
	(set-and-coerce-property! 'Screen1 'Scrollable #t 'boolean)
)

(add-component Screen1 com.google.appinventor.components.runtime.Button button1
	(set-and-coerce-property! 'button1 'Text "Show Message" 'text)
)

(add-component Screen1 com.google.appinventor.components.runtime.Notifier toast
)

(init-runtime)

(def g$test (call-yail-primitive make-yail-dictionary (*list-for-runtime* 
			(call-yail-primitive make-dictionary-pair (*list-for-runtime* "a" (call-yail-primitive + (*list-for-runtime* 1 2 ) '(number number ) "+")  ) '(key any) "make a pair")
			(call-yail-primitive make-dictionary-pair (*list-for-runtime* "b" (call-yail-primitive * (*list-for-runtime* 1 2 ) '(number number ) "*")  ) '(key any) "make a pair")
			(call-yail-primitive make-dictionary-pair (*list-for-runtime* "c" (call-yail-primitive yail-divide (*list-for-runtime* 1 2 ) '(number number ) "yail-divide")  ) '(key any) "make a pair")
			(call-yail-primitive make-dictionary-pair (*list-for-runtime* "d" (call-yail-primitive - (*list-for-runtime* 1 2 ) '(number number ) "-")  ) '(key any) "make a pair")
			(call-yail-primitive make-dictionary-pair (*list-for-runtime* "e" (call-yail-primitive expt (*list-for-runtime* 1 2 ) '(number number ) "expt")  ) '(key any) "make a pair")
			(call-yail-primitive make-dictionary-pair (*list-for-runtime* "f" (call-yail-primitive yail-equal? (*list-for-runtime* 2 3 ) '(number number ) "=")  ) '(key any) "make a pair")
			(call-yail-primitive make-dictionary-pair (*list-for-runtime* "g" (call-yail-primitive yail-equal? (*list-for-runtime* 2 3 ) '(number number ) "=")  ) '(key any) "make a pair")
			(call-yail-primitive make-dictionary-pair (*list-for-runtime* "h" (call-yail-primitive yail-not-equal? (*list-for-runtime* 2 2 ) '(number number ) "not =")  ) '(key any) "make a pair")
			(call-yail-primitive make-dictionary-pair (*list-for-runtime* "i" (call-yail-primitive yail-not-equal? (*list-for-runtime* 2 2 ) '(number number ) "not =")  ) '(key any) "make a pair")
			(call-yail-primitive make-dictionary-pair (*list-for-runtime* "j" (call-yail-primitive < (*list-for-runtime* 2 3 ) '(number number ) "<")  ) '(key any) "make a pair")
			(call-yail-primitive make-dictionary-pair (*list-for-runtime* "k" (call-yail-primitive <= (*list-for-runtime* 2 3 ) '(number number ) "<=")  ) '(key any) "make a pair")
			(call-yail-primitive make-dictionary-pair (*list-for-runtime* "l" (call-yail-primitive > (*list-for-runtime* 2 3 ) '(number number ) ">")  ) '(key any) "make a pair")
			(call-yail-primitive make-dictionary-pair (*list-for-runtime* "m" (call-yail-primitive >= (*list-for-runtime* 2 3 ) '(number number ) ">=")  ) '(key any) "make a pair")
			(call-yail-primitive make-dictionary-pair (*list-for-runtime* "n" (call-yail-primitive + (*list-for-runtime* (call-yail-primitive + (*list-for-runtime* 1 2 ) '(number number ) "+") 3 ) '(number number ) "+")  ) '(key any) "make a pair")
			(call-yail-primitive make-dictionary-pair (*list-for-runtime* "o" (call-yail-primitive - (*list-for-runtime* 1 ) '(number ) "negate")  ) '(key any) "make a pair")
			(call-yail-primitive make-dictionary-pair (*list-for-runtime* "p" 2  ) '(key any) "make a pair")
			(call-yail-primitive make-dictionary-pair (*list-for-runtime* "q" (call-yail-primitive bitwise-and (*list-for-runtime* 1 2 ) '(number number ) "bitwise-and")  ) '(key any) "make a pair")
			(call-yail-primitive make-dictionary-pair (*list-for-runtime* "r" (call-yail-primitive bitwise-ior (*list-for-runtime* 1 2 ) '(number number ) "bitwise-ior")  ) '(key any) "make a pair")
			(call-yail-primitive make-dictionary-pair (*list-for-runtime* "s" (call-yail-primitive bitwise-xor (*list-for-runtime* 1 2 ) '(number number ) "bitwise-xor")  ) '(key any) "make a pair")
			(call-yail-primitive make-dictionary-pair (*list-for-runtime* "t" (call-yail-primitive yail-not (*list-for-runtime* #f ) '(boolean ) "not")  ) '(key any) "make a pair")
			(call-yail-primitive make-dictionary-pair (*list-for-runtime* "u" (call-yail-primitive yail-not (*list-for-runtime* #t ) '(boolean ) "not")  ) '(key any) "make a pair")
			(call-yail-primitive make-dictionary-pair (*list-for-runtime* "v" (call-yail-primitive yail-not (*list-for-runtime* (call-yail-primitive yail-not (*list-for-runtime* #f ) '(boolean ) "not") ) '(boolean ) "not")  ) '(key any) "make a pair")
			(call-yail-primitive make-dictionary-pair (*list-for-runtime* "w" (call-yail-primitive sqrt (*list-for-runtime* 36 ) '(number) "sqrt")  ) '(key any) "make a pair")
			(call-yail-primitive make-dictionary-pair (*list-for-runtime* "x" (call-yail-primitive sqrt (*list-for-runtime* (call-yail-primitive - (*list-for-runtime* 36 ) '(number ) "negate") ) '(number) "sqrt")  ) '(key any) "make a pair")
			(call-yail-primitive make-dictionary-pair (*list-for-runtime* "y" (call-yail-primitive abs (*list-for-runtime* (call-yail-primitive - (*list-for-runtime* 5 ) '(number ) "negate") ) '(number) "abs")  ) '(key any) "make a pair")
			(call-yail-primitive make-dictionary-pair (*list-for-runtime* "z" (call-yail-primitive abs (*list-for-runtime* 12 ) '(number) "abs")  ) '(key any) "make a pair")
			(call-yail-primitive make-dictionary-pair (*list-for-runtime* "a1" (call-yail-primitive log (*list-for-runtime* (call-yail-primitive exp (*list-for-runtime* 4 ) '(number) "exp") ) '(number) "log")  ) '(key any) "make a pair")
			(call-yail-primitive make-dictionary-pair (*list-for-runtime* "b1" (call-yail-primitive exp (*list-for-runtime* 2 ) '(number) "exp")  ) '(key any) "make a pair")
			(call-yail-primitive make-dictionary-pair (*list-for-runtime* "c1" (call-yail-primitive yail-round (*list-for-runtime* 1.2 ) '(number) "round")  ) '(key any) "make a pair")
			(call-yail-primitive make-dictionary-pair (*list-for-runtime* "d1" (call-yail-primitive yail-round (*list-for-runtime* 1.7 ) '(number) "round")  ) '(key any) "make a pair")
			(call-yail-primitive make-dictionary-pair (*list-for-runtime* "e1" (call-yail-primitive yail-round (*list-for-runtime* 1.5 ) '(number) "round")  ) '(key any) "make a pair")
			(call-yail-primitive make-dictionary-pair (*list-for-runtime* "f1" (call-yail-primitive yail-ceiling (*list-for-runtime* 1.1 ) '(number) "ceiling")  ) '(key any) "make a pair")
			(call-yail-primitive make-dictionary-pair (*list-for-runtime* "g1" (call-yail-primitive yail-ceiling (*list-for-runtime* 1 ) '(number) "ceiling")  ) '(key any) "make a pair")
			(call-yail-primitive make-dictionary-pair (*list-for-runtime* "h1" (call-yail-primitive yail-ceiling (*list-for-runtime* (call-yail-primitive - (*list-for-runtime* 1.3 ) '(number ) "negate") ) '(number) "ceiling")  ) '(key any) "make a pair")
			(call-yail-primitive make-dictionary-pair (*list-for-runtime* "i1" (call-yail-primitive yail-floor (*list-for-runtime* 1.1 ) '(number) "floor")  ) '(key any) "make a pair")
			(call-yail-primitive make-dictionary-pair (*list-for-runtime* "j1" (call-yail-primitive yail-floor (*list-for-runtime* 1 ) '(number) "floor")  ) '(key any) "make a pair")
			(call-yail-primitive make-dictionary-pair (*list-for-runtime* "k1" (call-yail-primitive yail-floor (*list-for-runtime* (call-yail-primitive - (*list-for-runtime* 1.3 ) '(number ) "negate") ) '(number) "floor")  ) '(key any) "make a pair")
			(call-yail-primitive make-dictionary-pair (*list-for-runtime* "l1" (call-yail-primitive sin-degrees (*list-for-runtime* 90 ) '(number) "sin")  ) '(key any) "make a pair")
			(call-yail-primitive make-dictionary-pair (*list-for-runtime* "m1" (call-yail-primitive cos-degrees (*list-for-runtime* 90 ) '(number) "cos")  ) '(key any) "make a pair")
			(call-yail-primitive make-dictionary-pair (*list-for-runtime* "n1" (call-yail-primitive tan-degrees (*list-for-runtime* 45 ) '(number) "tan")  ) '(key any) "make a pair")
			(call-yail-primitive make-dictionary-pair (*list-for-runtime* "o1" (call-yail-primitive acos-degrees (*list-for-runtime* 0 ) '(number) "acos")  ) '(key any) "make a pair")
			(call-yail-primitive make-dictionary-pair (*list-for-runtime* "p1" (call-yail-primitive asin-degrees (*list-for-runtime* 0 ) '(number) "asin")  ) '(key any) "make a pair")
			(call-yail-primitive make-dictionary-pair (*list-for-runtime* "q1" (call-yail-primitive atan-degrees (*list-for-runtime* 1 ) '(number) "atan")  ) '(key any) "make a pair")
			(call-yail-primitive make-dictionary-pair (*list-for-runtime* "r1" (call-yail-primitive atan2-degrees (*list-for-runtime* (call-yail-primitive - (*list-for-runtime* 1 ) '(number ) "negate") (call-yail-primitive - (*list-for-runtime* 1 ) '(number ) "negate") ) '(number number) "atan2")  ) '(key any) "make a pair")
			(call-yail-primitive make-dictionary-pair (*list-for-runtime* "s1" (call-yail-primitive random-fraction (*list-for-runtime*) '() "random fraction")  ) '(key any) "make a pair")
			(call-yail-primitive make-dictionary-pair (*list-for-runtime* "t1" (call-yail-primitive min (*list-for-runtime* (call-yail-primitive - (*list-for-runtime* 1 ) '(number ) "negate") 2 25  ) '(number number number ) "min")  ) '(key any) "make a pair")
			(call-yail-primitive make-dictionary-pair (*list-for-runtime* "u1" (call-yail-primitive max (*list-for-runtime* (call-yail-primitive - (*list-for-runtime* 2 ) '(number ) "negate") 34 2  ) '(number number number ) "max")  ) '(key any) "make a pair")
			(call-yail-primitive make-dictionary-pair (*list-for-runtime* "v1" (call-yail-primitive random-integer (*list-for-runtime* 1 5 ) '(number number) "random integer")  ) '(key any) "make a pair")
			(call-yail-primitive make-dictionary-pair (*list-for-runtime* "w1" (call-yail-primitive modulo (*list-for-runtime* 9 2 ) '(number number) "modulo")  ) '(key any) "make a pair")
			(call-yail-primitive make-dictionary-pair (*list-for-runtime* "x1" (call-yail-primitive quotient (*list-for-runtime* 9 2 ) '(number number) "quotient")  ) '(key any) "make a pair")
			(call-yail-primitive make-dictionary-pair (*list-for-runtime* "y1" (call-yail-primitive radians->degrees (*list-for-runtime* 3.14 ) '(number) "convert radians to degrees")  ) '(key any) "make a pair")
			(call-yail-primitive make-dictionary-pair (*list-for-runtime* "z1" (call-yail-primitive degrees->radians (*list-for-runtime* 90 ) '(number) "convert degrees to radians")  ) '(key any) "make a pair")
			(call-yail-primitive make-dictionary-pair (*list-for-runtime* "a2" (call-yail-primitive random-set-seed (*list-for-runtime* 25 ) '(number) "random set seed")  ) '(key any) "make a pair"))
		'(pair pair pair pair pair pair pair pair pair pair pair pair pair pair pair pair pair pair pair pair pair pair pair pair pair pair pair pair pair pair pair pair pair pair pair pair pair pair pair pair pair pair pair pair pair pair pair pair pair pair pair pair pair ) 
		"make a dictionary" ))
(define-event button1 Click() (set-this-form) 
	(call-component-method 'toast 'ShowAlert (*list-for-runtime* (get-var g$test)) '(text))
	)

(call-Initialize-of-components 'Screen1 'button1 'toast  )