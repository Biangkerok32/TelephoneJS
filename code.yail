
(try-catch 
            (let 
                ((
                    attempt 
                        (delay 
                            (set-form-name "Screen1")
                        )
                )) 
                (force attempt)
            ) 
            (exception java.lang.Throwable 'notfound)
        )
        
(do-after-form-creation
	(set-and-coerce-property! 'Screen1 'AppName "yail" 'text)
	(set-and-coerce-property! 'Screen1 'Title "Great Title!" 'text)
	(set-and-coerce-property! 'Screen1 'TitleVisible #f 'boolean)
	(set-and-coerce-property! 'Screen1 'ShowStatusBar #f 'boolean)
	(set-and-coerce-property! 'Screen1 'Scrollable #t 'boolean)
)

(add-component Screen1 com.google.appinventor.components.runtime.Button button1
	(set-and-coerce-property! 'button1 'Text "Show Message 1" 'text)
)

(add-component Screen1 com.google.appinventor.components.runtime.TextBox textbox
	(set-and-coerce-property! 'textbox 'Width -2 'number)
	(set-and-coerce-property! 'textbox 'Height -2 'number)
	(set-and-coerce-property! 'textbox 'MultiLine #t 'boolean)
)

(add-component Screen1 com.google.appinventor.components.runtime.Notifier toast
)

(init-runtime)

    (def (p$add $a $b) 
        (if    
            (and-delayed (call-yail-primitive is-number? (*list-for-runtime* (lexical-value $a)) '(text) "is a number?") (call-yail-primitive is-number? (*list-for-runtime* (lexical-value $b)) '(text) "is a number?")) 
            (call-yail-primitive + (*list-for-runtime* (lexical-value $a) (lexical-value $b) ) '(number number ) "+") 
            (call-yail-primitive string-append (*list-for-runtime* (lexical-value $a) (lexical-value $b) ) '(text text ) "join")
        )
    )
    
    (def (p$eql $a $b $operator $operatorCommand ) 
        (if 
            (and (call-yail-primitive string? (*list-for-runtime* $a) '(any) "is a string?")  (call-yail-primitive string? (*list-for-runtime* $b) '(any) "is a string?")  )
            (call-yail-primitive string=? (*list-for-runtime* $a $b) '(text text) "text=")
            (call-yail-primitive $operator (*list-for-runtime* $a $b) '(number number ) "$operatorCommand")
        )
    )
    
    (def (p$neq $a $b $operator $operatorCommand ) 
        (if 
            (and (call-yail-primitive string? (*list-for-runtime* $a) '(any) "is a string?")  (call-yail-primitive string? (*list-for-runtime* $b) '(any) "is a string?")  )
            (not (call-yail-primitive string=? (*list-for-runtime* $a $b) '(text text) "not ="))
            (call-yail-primitive $operator (*list-for-runtime* $a $b) '(number number ) "$operatorCommand")
        )
    )
    
    (def (p$gt $a $b ) 
        (if 
            (and (call-yail-primitive string? (*list-for-runtime* $a) '(any) "is a string?")  (call-yail-primitive string? (*list-for-runtime* $b) '(any) "is a string?")  )
            (call-yail-primitive string>? (*list-for-runtime* $a $b) '(text text) "text>")
            (call-yail-primitive > (*list-for-runtime* $a $b ) '(number number ) ">")
        )
    )
    
    (def (p$lt $a $b ) 
        (if 
            (and (call-yail-primitive string? (*list-for-runtime* $a) '(any) "is a string?")  (call-yail-primitive string? (*list-for-runtime* $b) '(any) "is a string?")  )
            (call-yail-primitive string<? (*list-for-runtime* $a $b) '(text text) "text>")
            (call-yail-primitive < (*list-for-runtime* $a $b ) '(number number ) "<")
        )
    )
    
    (define 
        (trimstart initString) 
        (let 
             (  
                (counter 0)
             )
             (let   
                (
                    (shortString (substring initString 0 counter))
                )
                (while
                    (and
                        (= (string-length (string-trim shortString)) 0)
                        (<= counter (string-length initString))
                    )
                    (begin
                        (set! counter (+ counter 1))
                        (set! shortString (substring initString 0 counter))
                    )
                 )
                 (begin
                    (set! counter (- counter 1))
                    (substring
                        initString
                        counter
                        (string-length initString)
                    )
                )
            )
        )
    )
    
    
(def g$a "123456789")
(set-var!  g$a (if (string? (get-var g$a))(trimstart (get-var g$a)) #f)  )
(set-and-coerce-property! 'textbox 'Text ((get-var p$add) ((get-var p$add) (get-var g$a) ",") 
		                        (if 
			                            (call-yail-primitive yail-dictionary? (*list-for-runtime* (get-var g$a) ) '(any)  "check if something is a dictionary") 
			                            (call-yail-primitive yail-dictionary-lookup (*list-for-runtime* "length" (get-var g$a) "not found") '(key any any) "dictionary lookup") 
			                            (
				                                if 
				                                    (call-yail-primitive yail-list? (*list-for-runtime* (get-var g$a) ) '(any) "is a list?") 
				                                    (call-yail-primitive yail-list-length (*list-for-runtime* (get-var g$a) ) '(list) "length of list") 
				                                    (if 
					                                        (call-yail-primitive string? (*list-for-runtime* (get-var g$a) ) '(any) "is a string?") 
					                                        (call-yail-primitive string-length (*list-for-runtime* (get-var g$a) ) '(text) "length") 
					                                        #f
					                                    )
				                            )
			                        )) 'text)

(call-Initialize-of-components 'Screen1 'button1 'textbox 'toast  )