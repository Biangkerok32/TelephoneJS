
(try-catch 
            (let 
                ((
                    attempt 
                        (delay 
                            (set-form-name "Screen1")
                        )
                )) 
                (force attempt)
            ) 
            (exception java.lang.Throwable 'notfound)
        )
        
(do-after-form-creation
	(set-and-coerce-property! 'Screen1 'AppName "yail" 'text)
	(set-and-coerce-property! 'Screen1 'Title "Great Title!" 'text)
	(set-and-coerce-property! 'Screen1 'TitleVisible #f 'boolean)
	(set-and-coerce-property! 'Screen1 'ShowStatusBar #f 'boolean)
	(set-and-coerce-property! 'Screen1 'Scrollable #t 'boolean)
)

(add-component Screen1 com.google.appinventor.components.runtime.Button button1
	(set-and-coerce-property! 'button1 'Text "Show Message 1" 'text)
)

(add-component Screen1 com.google.appinventor.components.runtime.TextBox textbox
	(set-and-coerce-property! 'textbox 'Width -2 'number)
	(set-and-coerce-property! 'textbox 'Height -2 'number)
	(set-and-coerce-property! 'textbox 'MultiLine #t 'boolean)
)

(add-component Screen1 com.google.appinventor.components.runtime.Notifier toast
)

(init-runtime)

    (define %box-flag (string-copy "box flag"))     ;;define the flag for a box
    (define (box? x) (eq? (cdr x) %box-flag))       ;; is this a box
    (define (box x) (cons x %box-flag))             ;;build a box
    (define (unbox x)                               ;;unbox
        (if (box? x)                                ;;if box
            (car x)                                 ;;then return the box component
            (x)                                     ;;else return what sent in (no change - basically ignore erroroneous input)
        )
    )
    (define (set-box! x y)                          ;;change box contents
        (if (box? x)                                ;;if box
            (set-car! x y)                          ;;then change contents
            (#f)                                    ;;else do nothing     
        )
    )   
    

(def g$string "stingvalue")
(def g$number 2)
(def g$bool #t)
(def g$object (call-yail-primitive make-yail-dictionary (*list-for-runtime* 
			(call-yail-primitive make-dictionary-pair (*list-for-runtime* "key"  (call-yail-primitive make-yail-dictionary (*list-for-runtime* 
							(call-yail-primitive make-dictionary-pair (*list-for-runtime* "nestedkey"  "nestedvalue" ) '(key any) "make a pair"))
						'(pair ) 
						"make a dictionary" ) ) '(key any) "make a pair")
			(call-yail-primitive make-dictionary-pair (*list-for-runtime* "array"  (call-yail-primitive make-yail-list (*list-for-runtime* 1 2 3 4 ) '(any any any any ) "make a list") ) '(key any) "make a pair"))
		'(pair pair ) 
		"make a dictionary" ))
(def g$list (call-yail-primitive make-yail-list (*list-for-runtime* "item1" (get-var g$object) ) '(any any ) "make a list"))
(set-var!  g$string "newstring"  )
(set-var!  g$number (if 
		                                (and (call-yail-primitive is-number? (*list-for-runtime* 2) '(text) "is a number?") (call-yail-primitive is-number? (*list-for-runtime* (call-yail-primitive * (*list-for-runtime* (call-yail-primitive yail-divide (*list-for-runtime* 3 4 ) '(number number ) "yail-divide") (call-yail-primitive expt (*list-for-runtime* 7 2 ) '(number number ) "expt") ) '(number number ) "*")) '(text) "is a number?") )
		                                (call-yail-primitive + (*list-for-runtime* 2 (call-yail-primitive * (*list-for-runtime* (call-yail-primitive yail-divide (*list-for-runtime* 3 4 ) '(number number ) "yail-divide") (call-yail-primitive expt (*list-for-runtime* 7 2 ) '(number number ) "expt") ) '(number number ) "*") ) '(number number ) "+")
		                                (call-yail-primitive string-append 
			                                    (*list-for-runtime* 
				                                        2 
				                                        (call-yail-primitive * (*list-for-runtime* (call-yail-primitive yail-divide (*list-for-runtime* 3 4 ) '(number number ) "yail-divide") (call-yail-primitive expt (*list-for-runtime* 7 2 ) '(number number ) "expt") ) '(number number ) "*") 
				                                    ) 
			                                    '(text text ) 
			                                    "join"
			                                )
		                            )
	                                  )
(set-var!  g$bool #f  )
(set-and-coerce-property! 'textbox 'Text "hello" 'text)
(set-and-coerce-property! 'textbox 'Text (if 
		                                (and (call-yail-primitive is-number? (*list-for-runtime* (if 
						                                (and (call-yail-primitive is-number? (*list-for-runtime* (get-property 'textbox 'Text)) '(text) "is a number?") (call-yail-primitive is-number? (*list-for-runtime* (get-var g$object)) '(text) "is a number?") )
						                                (call-yail-primitive + (*list-for-runtime* (get-property 'textbox 'Text) (get-var g$object) ) '(number number ) "+")
						                                (call-yail-primitive string-append 
							                                    (*list-for-runtime* 
								                                        (get-property 'textbox 'Text) 
								                                        (get-var g$object) 
								                                    ) 
							                                    '(text text ) 
							                                    "join"
							                                )
						                            )
					                                ) '(text) "is a number?") (call-yail-primitive is-number? (*list-for-runtime* (get-var g$list)) '(text) "is a number?") )
		                                (call-yail-primitive + (*list-for-runtime* (if 
					                                (and (call-yail-primitive is-number? (*list-for-runtime* (get-property 'textbox 'Text)) '(text) "is a number?") (call-yail-primitive is-number? (*list-for-runtime* (get-var g$object)) '(text) "is a number?") )
					                                (call-yail-primitive + (*list-for-runtime* (get-property 'textbox 'Text) (get-var g$object) ) '(number number ) "+")
					                                (call-yail-primitive string-append 
						                                    (*list-for-runtime* 
							                                        (get-property 'textbox 'Text) 
							                                        (get-var g$object) 
							                                    ) 
						                                    '(text text ) 
						                                    "join"
						                                )
					                            )
				                                 (get-var g$list) ) '(number number ) "+")
		                                (call-yail-primitive string-append 
			                                    (*list-for-runtime* 
				                                        (if 
					                                (and (call-yail-primitive is-number? (*list-for-runtime* (get-property 'textbox 'Text)) '(text) "is a number?") (call-yail-primitive is-number? (*list-for-runtime* (get-var g$object)) '(text) "is a number?") )
					                                (call-yail-primitive + (*list-for-runtime* (get-property 'textbox 'Text) (get-var g$object) ) '(number number ) "+")
					                                (call-yail-primitive string-append 
						                                    (*list-for-runtime* 
							                                        (get-property 'textbox 'Text) 
							                                        (get-var g$object) 
							                                    ) 
						                                    '(text text ) 
						                                    "join"
						                                )
					                            )
				                                 
				                                        (get-var g$list) 
				                                    ) 
			                                    '(text text ) 
			                                    "join"
			                                )
		                            )
	                                 'text)
(define-event button1 Click() (set-this-form) 
	(call-component-method 'toast 'ShowAlert  (*list-for-runtime*  (get-property 'textbox 'Text) )  '(text))
	)

(call-Initialize-of-components 'Screen1 'button1 'textbox 'toast  )