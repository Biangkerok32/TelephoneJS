
(try-catch 
            (let 
                ((
                    attempt 
                        (delay 
                            (set-form-name "Screen1")
                        )
                )) 
                (force attempt)
            ) 
            (exception java.lang.Throwable 'notfound)
        )
        
(do-after-form-creation
	(set-and-coerce-property! 'Screen1 'AppName "yail" 'text)
	(set-and-coerce-property! 'Screen1 'Title "Great Title!" 'text)
	(set-and-coerce-property! 'Screen1 'TitleVisible #f 'boolean)
	(set-and-coerce-property! 'Screen1 'ShowStatusBar #f 'boolean)
	(set-and-coerce-property! 'Screen1 'Scrollable #t 'boolean)
)

(add-component Screen1 com.google.appinventor.components.runtime.Button button1
	(set-and-coerce-property! 'button1 'Text "Show Message 1" 'text)
)

(add-component Screen1 com.google.appinventor.components.runtime.TextBox textbox
	(set-and-coerce-property! 'textbox 'Width -2 'number)
	(set-and-coerce-property! 'textbox 'Height -2 'number)
	(set-and-coerce-property! 'textbox 'MultiLine #t 'boolean)
)

(add-component Screen1 com.google.appinventor.components.runtime.Notifier toast
)

(init-runtime)

    (def (p$add $a $b) 
        (if    
            (and-delayed (call-yail-primitive is-number? (*list-for-runtime* (lexical-value $a)) '(text) "is a number?") (call-yail-primitive is-number? (*list-for-runtime* (lexical-value $b)) '(text) "is a number?")) 
            (call-yail-primitive + (*list-for-runtime* (lexical-value $a) (lexical-value $b) ) '(number number ) "+") 
            (call-yail-primitive string-append (*list-for-runtime* (lexical-value $a) (lexical-value $b) ) '(text text ) "join")
        )
    )
    
    (def (p$eql $a $b $operator $operatorCommand ) 
        (if 
            (and (call-yail-primitive string? (*list-for-runtime* $a) '(any) "is a string?")  (call-yail-primitive string? (*list-for-runtime* $b) '(any) "is a string?")  )
            (call-yail-primitive string=? (*list-for-runtime* $a $b) '(text text) "text=")
            (call-yail-primitive $operator (*list-for-runtime* $a $b) '(number number ) "$operatorCommand")
        )
    )
    
    (def (p$neq $a $b $operator $operatorCommand ) 
        (if 
            (and (call-yail-primitive string? (*list-for-runtime* $a) '(any) "is a string?")  (call-yail-primitive string? (*list-for-runtime* $b) '(any) "is a string?")  )
            (not (call-yail-primitive string=? (*list-for-runtime* $a $b) '(text text) "not ="))
            (call-yail-primitive $operator (*list-for-runtime* $a $b) '(number number ) "$operatorCommand")
        )
    )
    
    (def (p$gt $a $b ) 
        (if 
            (and (call-yail-primitive string? (*list-for-runtime* $a) '(any) "is a string?")  (call-yail-primitive string? (*list-for-runtime* $b) '(any) "is a string?")  )
            (call-yail-primitive string>? (*list-for-runtime* $a $b) '(text text) "text>")
            (call-yail-primitive > (*list-for-runtime* $a $b ) '(number number ) ">")
        )
    )
    
    (def (p$lt $a $b ) 
        (if 
            (and (call-yail-primitive string? (*list-for-runtime* $a) '(any) "is a string?")  (call-yail-primitive string? (*list-for-runtime* $b) '(any) "is a string?")  )
            (call-yail-primitive string<? (*list-for-runtime* $a $b) '(text text) "text>")
            (call-yail-primitive < (*list-for-runtime* $a $b ) '(number number ) "<")
        )
    )
    
(def g$a ((get-var p$eql) "a" "a" yail-equal? =))
(def g$b ((get-var p$eql) "a" "a" yail-equal? =))
(def g$c ((get-var p$neq) "a" "a" yail-not-equal? "not ="))
(def g$d ((get-var p$neq) "a" "a" yail-not-equal? "not ="))
(def g$e ((get-var p$eql) "a" "b" yail-equal? =))
(def g$f ((get-var p$eql) "a" "b" yail-equal? =))
(def g$g ((get-var p$neq) "a" "b" yail-not-equal? "not ="))
(def g$h ((get-var p$neq) "a" "b" yail-not-equal? "not ="))
(def g$i ((get-var p$gt) "a" "b"))
(def g$j ((get-var p$lt) "a" "b"))
(set-and-coerce-property! 'textbox 'Text ((get-var p$add) ((get-var p$add) ((get-var p$add) ((get-var p$add) ((get-var p$add) ((get-var p$add) ((get-var p$add) ((get-var p$add) ((get-var p$add) ((get-var p$add) ((get-var p$add) ((get-var p$add) ((get-var p$add) ((get-var p$gt) 1 2) ",") ((get-var p$lt) 1 2)) ",") ((get-var p$lt) "a" "b")) ",") ((get-var p$gt) "a" "b")) (or ((get-var p$lt) 1 2) ((get-var p$eql) 1 2 yail-equal? =))) ",") (or ((get-var p$gt) 1 2) ((get-var p$eql) 1 2 yail-equal? =))) ",") (or ((get-var p$lt) "a" "b") ((get-var p$eql) "a" "b" yail-equal? =))) ",") (or ((get-var p$gt) "a" "b") ((get-var p$eql) "a" "b" yail-equal? =))) 'text)
(define-event button1 Click() (set-this-form) 
	(call-component-method 'toast 'ShowAlert  (*list-for-runtime*  (get-property 'textbox 'Text) )  '(text))
	)

(call-Initialize-of-components 'Screen1 'button1 'textbox 'toast  )